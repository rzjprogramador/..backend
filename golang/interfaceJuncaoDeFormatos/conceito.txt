
interface:
beneficio: interface é poder usar na funcaoPrincipalExecutadora utilizar a implementacao de mais que um  Formato struct

struct :: 
  modelagem: criamos o contrato dos campos que vamos utilizar

  uso_em_funcao: passamos como variavelParam pra usar os campos prometidos...e implementamos como estes campos vai se comportar fazendo a logica.

  se_implementar_alguma_interface: 
    na_funcao: prometemos que vai retornar o metodo da interface que queremos implementar como se fosse o implements só que colocamos o metodo e seu retorno.

  na_funcao_que_vai_receber_a_interface:
  recebemos via variavelParam a interface e retornamos o metodo prometido nela da forma que quisemos pode ser dentro de uma string é poliformico podemos retornar esta acao como quisermos ou como prometemos neste metodo.

  na_funcao_executadora_principal:
    daremos valor aos structs instanciandos eles eles
    e passando esta instancia com valor para o metodo que espera a funcao que recebe a interface.

mais_detalhes:
  - interfaces em golang só podemos passar assinatura de metodos...dizer como o metodo deve ser.

  - tipos: uma funcao só pode receber parametros do mesmo tipo no golang

  - em golang faz a implementacao implicita ao inves de expressa implements igual o ts vc coloca o metodo da interface que vc quer implementar aotomaticamente ele entende que esta implementando a interface.


